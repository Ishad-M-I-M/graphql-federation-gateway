/*
 * Copyright (c) 2023, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'java'
    id 'checkstyle'
    id 'com.github.spotbugs'
}

apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "jacoco"

description = 'Ballerina - Federation Gateway'

configurations {
    balTools
    dist {
        transitive true
    }
}

dependencies {
    checkstyle project(':checkstyle')
    checkstyle "com.puppycrawl.tools:checkstyle:${checkstylePluginVersion}"

    implementation group: 'org.ballerinalang', name: 'ballerina-lang', version: "${ballerinaLangVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-runtime', version: "${ballerinaLangVersion}"
    implementation "org.ballerinalang:ballerina-lang:${ballerinaLangVersion}"
    implementation "org.ballerinalang:ballerina-parser:${ballerinaLangVersion}"
    implementation "org.ballerinalang:ballerina-tools-api:${ballerinaLangVersion}"
    implementation "org.ballerinalang:ballerina-cli:${ballerinaLangVersion}"
    implementation "org.ballerinalang:formatter-core:${ballerinaLangVersion}"
    implementation "io.ballerina.stdlib:graphql-commons:${stdlibGraphqlVersion}"
    implementation "commons-io:commons-io:${commonsIoVersion}"
    implementation "com.graphql-java:graphql-java:${graphqlJavaVersion}"
    implementation "com.graphql-java:graphql-java-extended-scalars:${graphqlJavaExtendedScalarVersion}"
    implementation "commons-logging:commons-logging:${commonsLoggingVersion}"
    testImplementation "org.testng:testng:${testngVersion}"
    dist "com.graphql-java:graphql-java:${graphqlJavaVersion}"
    dist "com.graphql-java:graphql-java-extended-scalars:${graphqlJavaExtendedScalarVersion}"

    balTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
}

def excludePattern = '**/module-info.java'
tasks.withType(Checkstyle) {
    exclude excludePattern
}

checkstyle {
    toolVersion "${project.checkstylePluginVersion}"
    configFile rootProject.file("build-config/checkstyle/build/checkstyle.xml")
    configProperties = ["suppressionFile" : file("${rootDir}/build-config/checkstyle/build/suppressions.xml")]
}

checkstyleMain.dependsOn(":checkstyle:downloadCheckstyleRuleFiles")

spotbugsMain {
    effort "max"
    reportLevel "low"
    reportsDir = file("$project.buildDir/reports/spotbugs")
    reports {
        html.enabled true
        text.enabled = true
    }
    def excludeFile = file("${rootDir}/spotbugs-exclude.xml")
    if(excludeFile.exists()) {
        excludeFilter = excludeFile
    }
}

spotbugsTest {
    enabled = false
}

def bDistribution = file("$project.buildDir/extracted-distribution/jballerina-tools-${ballerinaLangVersion}")
task jBallerinaPack {
    doLast {
        configurations.balTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File(project.buildDir, "extracted-distribution/")
            }
        }
    }
    outputs.dir bDistribution
}

task unpackStdLibs() {
    dependsOn(jBallerinaPack)
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${project.buildDir}/extracted-distribution/" + artifact.name + "-zip")
            }
        }
    }
}

jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = file("$rootProject.projectDir/build/reports/jacoco")
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
    }
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}


test {
    systemProperties = [ "target.dir": "$project.buildDir",
                         "distributions.dir": bDistribution,
                         "ballerina.home": bDistribution,
                         "ballerina.version": "jballerina-tools-${ballerinaLangVersion}"
    ]

    testLogging {
        showStackTraces = true
        showStandardStreams = true
    }

    useTestNG() {
        suites "src/test/resources/testng.xml"
    }
    finalizedBy jacocoTestReport
}

clean {
    delete("${projectDir}/src/test/resources/subgraphServices/astronautService/target")
    delete("${projectDir}/src/test/resources/subgraphServices/missionsService/target")
}

jacocoTestReport.dependsOn test

build.dependsOn(jacocoTestReport)

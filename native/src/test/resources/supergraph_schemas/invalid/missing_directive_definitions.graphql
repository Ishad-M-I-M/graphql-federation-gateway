type Astronaut
@join__type(graph: ASTRONAUTS, key: "id")
@join__type(graph: MISSIONS, key: "id") {
    id: Int!
    name: String! @join__field(graph: ASTRONAUTS)
    missions: [Mission!]! @join__field(graph: MISSIONS)
}

enum join__Graph {
    ASTRONAUTS @join__graph(name: "astronauts", url: "http://localhost:5001")
    MISSIONS @join__graph(name: "missions", url: "http://localhost:5002")
}

enum link__Purpose {
    """
    `SECURITY` features provide metadata necessary to securely resolve fields.
    """
    SECURITY

    """
    `EXECUTION` features provide metadata necessary for operation execution.
    """
    EXECUTION
}

type Mission @join__type(graph: MISSIONS, key: "id", resolvable: false) {
    id: Int!
    designation: String!
    startDate: String
    endDate: String
    crew: [Astronaut!]!
}

input MissionInput @join__type(graph: MISSIONS) {
    designation: String!
    startDate: String
    endDate: String
    crewIds: [Int!]!
}

type Mutation @join__type(graph: ASTRONAUTS) @join__type(graph: MISSIONS) {
    addMission(missionInput: MissionInput!): Mission! @join__field(graph: MISSIONS)
    setServiceName(name: String!): String! @join__field(graph: ASTRONAUTS)
}

type Query @join__type(graph: ASTRONAUTS) @join__type(graph: MISSIONS) {
    astronauts: [Astronaut!]! @join__field(graph: ASTRONAUTS)
    astronaut(id: Int!): Astronaut @join__field(graph: ASTRONAUTS)
    serviceName: String! @join__field(graph: ASTRONAUTS)
    isExist(name: String!): Boolean! @join__field(graph: ASTRONAUTS)
    missions: [Mission!]! @join__field(graph: MISSIONS)
    mission(id: Int!): Mission! @join__field(graph: MISSIONS)
}
